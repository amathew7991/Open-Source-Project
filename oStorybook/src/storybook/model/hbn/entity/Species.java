/*
Storybook: Open Source software for novelists and authors.
Copyright (C) 2008 - 2012 Martin Mustun

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package storybook.model.hbn.entity;

import java.awt.Dimension;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.w3c.dom.Node;

import storybook.i18n.I18N;

/**
 * Species generated by hbm2java
 * @hibernate.class
 *   table="SPECIES"
 */
public class Species extends AbstractEntity {

	private String name;
	private String description;
	private String icone;

	public Species() {
	}

	public Species(String name, String description) {
		this.name = name;
		this.description = description;
	}

	@Override
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	public String getDescription() {
		return this.description;
	}
	
	public void setDescription(String description) {
		this.description = description;
	}
	
	public boolean isHuman() {
		return id == 1;
	}

	@Override
	public Icon getImageIcon() {
		if (getIcone()!=null) {
			return new ImageIcon(getIcone());
		}
		return I18N.getIcon("icon.small.species");
	}
	
	public Icon getIcon(int h,int l) {
		if (getIcone()!=null) {
			return (I18N.resizeIcon(new ImageIcon(getIcone()),new Dimension(h,l)));
		}
		return I18N.getIcon("icon.small.species");
	}
	
	public void setIcon(String str) {
		icone=str;
	}
	
	public String getIcon() {
		return(icone);
	}
	
	public void setIcone(String str) {
		icone=str;
	}
	
	public String getIcone() {
		return(icone);
	}

	@Override
	public String toString() {
		return getName();
	}

	@Override
	public String toCsv(String quoteStart,String quoteEnd, String separator) {
		StringBuilder b=new StringBuilder();
		b.append(quoteStart).append(getId().toString()).append(quoteEnd).append(separator);
		b.append(quoteStart).append(getName()).append(quoteEnd).append(separator);
		b.append(quoteStart).append(getDescription()).append(quoteEnd).append(separator);
		b.append(quoteStart).append(getIcone()).append(quoteStart).append("\n");
		return(b.toString());
	}
	
	@Override
	public String toHtml() {
		return(toCsv("<td>","</td>","\n"));
	}
	
	@Override
	public String toText() {
		return(toCsv("","","\t"));
	}
	
	@Override
	public String toXml() {
		StringBuilder b=new StringBuilder();
		b.append(xmlTab(1)).append("<description \n");
		b.append(xmlCommon());
		b.append(xmlAttribute("name", getName()));
		b.append(xmlAttribute("description", getDescription()));
		b.append(xmlAttribute("icone", getIcone()));
		b.append(xmlTab(2)).append(" />\n");
		return(b.toString());
	}
	
	public static Species fromXml(Node node) {
		Species p=new Species();
		p.setId(getXmlLong(node,"id"));
		p.setName(getXmlString(node,"name"));
		p.setName(getXmlString(node,"description"));
		p.setIcone(getXmlString(node,"icone"));
		return(p);
	}

	@Override
	@SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
	public boolean equals(Object obj) {
		if (!super.equals(obj)) {
			return false;
		}
		Species test = (Species) obj;
		boolean ret = true;
		ret = ret && equalsStringNullValue(name, test.getName());
		ret = ret && equalsStringNullValue(description, test.getDescription());
		return ret;
	}

	@Override
	public int hashCode() {
		int hash = super.hashCode();
		hash = hash * 31 + (name != null ? name.hashCode() : 0);
		hash = hash * 31 + (description != null ? description.hashCode() : 0);
		return hash;
	}
}
